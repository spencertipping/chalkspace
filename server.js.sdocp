sdocp('server.js.sdoc', 'Chalkspace server | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIdea.\nThis server just coordinates a shared array of lines. Clients connect using the RPC (which uses push-style notifications) and download line deltas. Lines are kept in a central database so that\ndrawings are persistent. Drawings are represented in three-dimensional space. All lines, then, have endpoints in 3D and form a structure rather than an image.\n\ncaterwaul.clone(\'std seq continuation montenegro db.file\')(function () {\n  l*[db = caterwaul.db.file(\'drawing-db\'), clients = {}] in\n  caterwaul.montenegro.server(8080) /se.server[\n    server.file(\'/\', \'client/\').alias(\'/\', \'/index.html\'),\n\n    l/cps[(drawing, n) <- server.rpc(\'/listen\', \'listen(drawing, [n]) listens for updates for a particular drawing. If n is absent or 0, you get the whole drawing.\', _)]\n         [(clients[drawing] || (clients[drawing] = seq[~[]])).push({reply: this, last: n || 0})],\n\n    l/cps[(drawing, v1, v2) <- server.rpc(\'/draw\', \'draw(drawing, v1, v2) draws a line.\', _)]\n         [add_line_to(drawing, v1, v2), clients[drawing] && update_clients(clients[drawing]), delete clients[drawing], this(\'OK\')],\n           \n    where*[add_line_to(drawing, v1, v2) = db(drawing)(_) /cps[db(drawing)({length: (_.length || 0) + 1} /se.r[r[_.length || 0] = {v1: v1, v2: v2}])],\n           update_clients(cs)           = db(drawing)(_) /cps.lines[l[ls = seq[~lines]] in seq[cs *![_.reply(ls.slice(_.last))]]]]]})();\n');